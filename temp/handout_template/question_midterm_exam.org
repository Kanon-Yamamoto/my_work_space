* 想定質問集
** 自分が参考にした論文の背景を説明してください
** その研究は具体的に何に役立つ？(具体的な応用例などをわかりやすく説明できるようにする)
これまで行なっていた曖昧性のあるカテゴリ分類から脱却可能
例: Discord -> グループウェアアプリ or オンラインコミュニケーションツール
グループ内でのカテゴリ分類が人によって異なるが、時間だと統一の基準で共有データを参照、保存できる
編集、投稿順に表示されるため本当に必要な情報が探しやすくなる
** その研究を行った意図は何？(何をしたかはっきり応えられるようにする)
データ共有・参照の習慣化を強制することを目的とした
** 似たようなアプリが存在するけど、他じゃダメなの？
日付でのデータ整理ができるという独自性がある
日付というキーさえ覚えていればデータ探索が楽になる
** 「超」整理法とは何ですか？
従来のカテゴリ整理ではなく、時間軸をキーとした情報整理法のこと
カテゴリ整理のデメリットとして、どのカテゴリにも当てはまらない場合に「その他」というカテゴリの中身が多くなり、参照したいデータを探す手間が増える
** 今後の課題として挙げられている通知機能やローカルPCからのデータ送信スクリプトについて、それらの機能をどのように実装する予定ですか？
過去、西谷研究室にqiita orgというPC上で書いたorgファイルをqiitaにアップロードするgemを開発していた先輩が居た為、その先輩の論文やプログラムを参考にしながら開発する
通知機能はメール通知だと見逃してしまうため、プッシュ通知にする
共有データの重み付けについては、具体的なアルゴリズムは考えていない、これから考えていく
** Discordに代わる情報共有ツールを開発する際に、ユーザーのニーズやフィードバックをどのように収集しましたか？ユーザーの意見をどのように考慮しましたか？
実際にアプリをリリースして使用してもらった
-> アジャイル開発を採用した
** 参考文献の中で、論文の研究にどのように関連しているものがありますか？特定の文献が研究の背景にどのように影響を与えましたか？
データをわざわざスクロールして遡る必要があるのならば、日付で管理してしまえばいいのではないのかというアイデアを考えた際に、「超」整理法という著書に出会った

** 開発手法に関する質問
*** Ruby on Railsを開発環境として選定した理由は何ですか？Railsの利点をもう少し詳しく説明していただけますか？
*** Rails以外にもLaravelといったフレームワークがあるが、なぜRails?
1. Railsの方が開発速度が速い
*** 「超」整理法の時間軸をキーとしたデータの分類方法を使用することによって、どのような利点が得られるのですか？
*** 開発したWebアプリのデータ管理方法を具体的に説明していただけますか？日付ごとのデータ管理をどのように実現しましたか？

** 結果に関する質問
*** 開発したWebアプリにおける情報共有の主なメリットとして挙げられている2つのポイントについて、それぞれ具体的な例を示していただけますか？
*** DiscordとWebアプリとの比較において、アクション数の観点からWebアプリが優れていると主張されていますが、具体的なアクションの違いを説明していただけますか？

** 今後の課題に関する質問
*** 今後の課題として挙げられている通知機能やローカルPCからのデータ送信スクリプトについて、それらをどのように実装する予定ですか？
*** 共有データの見逃しを防ぐための要素から共有データを重みづけし、不要なデータを自動的に削除する機能の詳細を教えていただけますか？
